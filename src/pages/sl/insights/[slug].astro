---
import PostLayout from '../../../layouts/PostLayout.astro'
import { getCollection, getEntry, render } from 'astro:content'
import { getRelatedPostsSimple, getFallbackPosts } from '../../../utils/relatedPosts'

export const prerender = true;

export async function getStaticPaths() {
  const collection = await getCollection('insights', ({ id }) => 
    id.startsWith('sl-')
  )
  const paths = []
  for (const e of collection.filter((e) => (e.data?.status ?? 'publish') === 'publish')) {
    const full = e.slug ?? e.id.replace(/\.mdx?$/, '')
    const local = full.replace(/^sl-/, '')
    paths.push({ params: { slug: local } })
    const sourceSlug = e.data?.sourceSlug
    if (sourceSlug && sourceSlug !== local) {
      paths.push({ params: { slug: sourceSlug } })
    }
  }
  const seen = new Set()
  return paths.filter((p) => {
    const key = p.params.slug
    if (seen.has(key)) return false
    seen.add(key)
    return true
  })
}

const { slug } = Astro.params
console.log('[SL insights] request slug:', slug)
let entry = await getEntry('insights', `sl-${slug}`)
if (!entry) {
  // Fallback: cerca la traduzione SL usando sourceSlug e redirigi
  const slPosts = await getCollection('insights', ({ id }) => id.startsWith('sl-'))
  console.log('[SL insights] fallback search among', slPosts.length, 'posts')
  const fallback = slPosts.find((e) => (e.data?.sourceSlug ?? '') === slug)
  if (!fallback) {
    console.warn('[SL insights] no fallback found for sourceSlug:', slug)
  }
  if (fallback) {
    const full = fallback.slug ?? fallback.id.replace(/\.mdx?$/, '')
    const local = full.replace(/^sl-/, '')
    console.log('[SL insights] redirecting to localized slug:', local)
    return Astro.redirect(`/sl/insights/${local}/`, 301)
  }
  throw new Error('Not found')
}
const { Content } = await render(entry)

// Carica tutti i post sloveni per calcolare i correlati
const allPosts = await getCollection('insights', ({ id }) => id.startsWith('sl-'))

// Calcola articoli correlati
let relatedPosts = getRelatedPostsSimple(entry, allPosts, 3)

// Se non trova abbastanza correlati, usa il fallback
if (relatedPosts.length < 2) {
  const fallbackPosts = getFallbackPosts(entry, allPosts, 3)
  const existingIds = new Set(relatedPosts.map(p => p.id))
  const additionalPosts = fallbackPosts.filter(p => !existingIds.has(p.id))
  relatedPosts = [...relatedPosts, ...additionalPosts].slice(0, 3)
}
---
<PostLayout frontmatter={entry.data} slug={slug} relatedPosts={relatedPosts}>
  <Content />
</PostLayout>


