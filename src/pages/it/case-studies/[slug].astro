---
import DefaultLayout from '../../../layouts/DefaultLayout.astro'
import BreakoutImage from '../../../components/BreakoutImage.astro'
import { getCollection, getEntry, render } from 'astro:content'

export async function getStaticPaths() {
  const collection = await getCollection('caseStudies')
  return collection.map((e) => {
    const slug = e.slug ?? e.id.replace(/\.mdx?$/, '')
    return { params: { slug } }
  })
}

const { slug } = Astro.params
const entry = await getEntry('caseStudies', slug)
if (!entry) throw new Error('Not found')
const { Content } = await render(entry)

// Get the hero image - prefer cover.webp over card.webp for hero display
function getHeroImage(data: any, slug: string) {
  // Try cover format first for hero display
  const coverPath = `/case-studies/${slug}/cover.webp`
  
  // Then try from frontmatter
  const fmCandidates = [data.image, data.ogImage, data.featuredImage]
  for (const candidate of fmCandidates) {
    if (typeof candidate === 'string' && candidate.trim().length > 0) {
      // Prefer cover format if it follows the pattern
      if (candidate.includes('/case-studies/')) {
        const basePath = candidate.substring(0, candidate.lastIndexOf('/'))
        return `${basePath}/cover.webp`
      }
      return candidate.trim()
    }
  }
  
  // Fallback to cover path (script should have generated it)
  return coverPath
}

const heroImage = getHeroImage(entry.data, slug)
---
<DefaultLayout title={entry.data.title}>
  <article class="container my-16 prose">
    <h1>{entry.data.title}</h1>
    {entry.data.kpi && <p class="lead"><strong>{entry.data.kpi}</strong></p>}
    
    <BreakoutImage src={heroImage} alt={entry.data.title} />
    
    <Content />
  </article>
</DefaultLayout>


