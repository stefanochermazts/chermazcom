---
import UnifiedLayout from '../../../layouts/UnifiedLayout.astro'
import ArticleCard from '../../../components/ArticleCard.astro'
import { getCollection } from 'astro:content'

// Simplified and optimized collection loading
const all = await getCollection('insights', ({ id }) => !id.startsWith('en-') && !id.startsWith('sl-'))
let posts = all
  .filter(p => p.data.status === 'publish') // Only published posts
  .sort((a, b) => new Date(b.data.date || 0).getTime() - new Date(a.data.date || 0).getTime())

// Simplified category processing
const normalize = (s: string) => s.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '')
const categories = [...new Set(
  posts.flatMap(p => (p.data.categories || []).map(normalize))
)].sort()

// Server-side filtering via querystring (?cat=...&q=...&sort=oldest)
const { searchParams } = new URL(Astro.url)
const catParam = searchParams.get('cat')
const qParam = searchParams.get('q')?.toLowerCase() || ''
const sortParam = searchParams.get('sort')

if (catParam) {
  posts = posts.filter(p => (p.data.categories || []).some(c => normalize(String(c)) === catParam))
}
if (qParam) {
  posts = posts.filter(p => (
    (p.data.title || '').toLowerCase().includes(qParam) ||
    (p.data.excerpt || p.data.description || '').toLowerCase().includes(qParam)
  ))
}
if (sortParam === 'oldest') {
  posts = [...posts].sort((a, b) => new Date(a.data.date || 0).getTime() - new Date(b.data.date || 0).getTime())
}
---
<UnifiedLayout enableTransitions={true} title="Insights — IT" useLocalizedMeta={true} pageKey="insights">
  <section class="mt-12 mb-32" style="max-width:1366px;margin-inline:auto;padding-inline:1rem;">
    <h1 class="text-6xl mb-8">Insights</h1>

    <!-- Toolbar: chips categoria, ricerca, sort -->
    <form id="toolbar" class="mb-8 flex flex-col gap-4" method="get" aria-label="Filtri e ordinamento articoli">
      <div class="flex items-center gap-2 flex-wrap" aria-label="Categorie">
        {categories.map(cat => (
          <a href={`?cat=${cat}${qParam ? `&q=${encodeURIComponent(qParam)}` : ''}${sortParam ? `&sort=${sortParam}` : ''}`} class={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm ring-1 ring-zinc-300 dark:ring-zinc-700 ${catParam === cat ? 'bg-zinc-900 text-white dark:bg-zinc-100 dark:text-zinc-900' : 'hover:bg-zinc-50 dark:hover:bg-zinc-800'}`}>{cat}</a>
        ))}
      </div>
      <div class="flex items-center gap-3 md:justify-between md:flex-row flex-col">
        <div class="flex-1 w-full md:w-auto">
          <label for="search" class="sr-only">Cerca</label>
          <input id="search" name="q" type="search" value={qParam ?? ''} placeholder="Cerca negli articoli" class="w-full md:max-w-md rounded-lg ring-1 ring-zinc-300 dark:ring-zinc-700 px-3 py-2 text-base bg-white dark:bg-zinc-900" aria-label="Cerca per titolo o descrizione" />
        </div>
        <div class="flex items-center gap-2">
          <label for="sort" class="sr-only">Ordina</label>
          <select id="sort" name="sort" class="rounded-lg ring-1 ring-zinc-300 dark:ring-zinc-700 px-3 py-2 bg-white dark:bg-zinc-900" aria-label="Ordina articoli">
            <option value="newest" selected={!sortParam || sortParam === 'newest'}>Più recenti</option>
            <option value="oldest" selected={sortParam === 'oldest'}>Più vecchi</option>
          </select>
          <button type="submit" class="rounded-lg bg-brand-600 text-white px-3 py-2 text-sm font-semibold hover:bg-brand-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500">Applica</button>
        </div>
      </div>
    </form>

    <h2 class="text-4xl mb-6">Tutti gli articoli</h2>
    <section aria-label="Tutti gli articoli">
      <ul role="list" class="list-none pl-0 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {posts.map(p => (
          <li>
            <ArticleCard post={p} />
          </li>
        ))}
      </ul>
    </section>
  </section>

  <script>
    // JS progressivo: filtra live la ricerca senza rompere querystring esistente
    (function(){
      const input = document.getElementById('search') as HTMLInputElement | null
      if (!input) return
      const list = document.querySelector('section[aria-label="Tutti gli articoli"] ul')
      if (!list) return
      input.addEventListener('input', () => {
        const q = input.value.trim().toLowerCase()
        for (const li of Array.from(list.children)) {
          const text = (li.textContent || '').toLowerCase()
          ;(li as HTMLElement).style.display = text.includes(q) ? '' : 'none'
        }
      })
    })()
  </script>
</UnifiedLayout>


