---
import PostLayout from '../../../layouts/PostLayout.astro'
import { getCollection, getEntry, render } from 'astro:content'
import { getRelatedPostsSimple, getFallbackPosts } from '../../../utils/relatedPosts'

export const prerender = true;

const { slug } = Astro.params
const entry = await getEntry('insights', `en-${slug}`)
if (!entry) throw new Error('Not found')
const { Content } = await render(entry)

// Carica tutti i post inglesi per calcolare i correlati
const allPosts = await getCollection('insights', ({ id }) => id.startsWith('en-'))

// Calcola articoli correlati
let relatedPosts = getRelatedPostsSimple(entry, allPosts, 3)

// Se non trova abbastanza correlati, usa il fallback
if (relatedPosts.length < 2) {
  const fallbackPosts = getFallbackPosts(entry, allPosts, 3)
  const existingIds = new Set(relatedPosts.map(p => p.id))
  const additionalPosts = fallbackPosts.filter(p => !existingIds.has(p.id))
  relatedPosts = [...relatedPosts, ...additionalPosts].slice(0, 3)
}
export async function getStaticPaths() {
  const collection = (await getCollection('insights')).filter((e)=> e.id.startsWith('en-'))
  return collection
    .filter((e) => (e.data?.status ?? 'publish') === 'publish')
    .map((e) => {
      const full = e.slug ?? e.id.replace(/\.mdx?$/, '')
      const local = full.replace(/^en-/, '')
      return { params: { slug: local } }
    })
}
---
<PostLayout frontmatter={entry.data} slug={slug} relatedPosts={relatedPosts}>
  <Content />
</PostLayout>
