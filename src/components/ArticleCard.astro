---
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'insights'>
  baseUrl?: string
}

const { post, baseUrl = '/it/insights' } = Astro.props
const rawSlug = post.slug ?? post.id.replace(/\.mdx?$/, '')
// Per i file con prefisso linguistico (en-, sl-), rimuovi il prefisso
// Per i file nelle cartelle (it/, en/, sl/), rimuovi il path
const normalizedSlug = rawSlug.replace(/^(en-|sl-)/,'').replace(/^(it|en|sl)\//, '')
const href = `${baseUrl}/${normalizedSlug}/`

// More robust image selection logic with card-specific format
function getImageSrc(data: any, normalized: string) {
  // Try card-specific format first
  const cardPath = `/posts/${normalized}/card.webp`
  
  // For now, assume card.webp exists (will be generated by script)
  // Could add existence check here if needed
  
  // Then try from frontmatter
  const fmCandidates = [data.image, data.ogImage, data.featuredImage]
  for (const candidate of fmCandidates) {
    if (typeof candidate === 'string' && candidate.trim().length > 0) {
      // Prefer card format if it follows the pattern
      if (candidate.includes('/posts/')) {
        const basePath = candidate.substring(0, candidate.lastIndexOf('/'))
        return `${basePath}/card.webp`
      }
      return candidate.trim()
    }
  }
  
  // Finally fallback
  return '/images/logo_stefano_chermaz.png'
}

const image = getImageSrc(post.data, normalizedSlug)
const date = post.data.date ? new Date(post.data.date) : null
const categories: string[] = (post.data.categories ?? [])
const primaryCategory: string | null = categories.length > 0 ? String(categories[0]) : null
const normalize = (s: string) => s.toLowerCase().normalize('NFD').replace(/\p{Diacritic}/gu, '').replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')
const categorySlug = primaryCategory ? normalize(primaryCategory) : ''
const dateString = date ? date.toLocaleDateString('it-IT', { 
  day: 'numeric', 
  month: 'short', 
  year: 'numeric' 
}) : ''
---

<article class="group border rounded-2xl overflow-hidden bg-white dark:bg-gray-900 hover:shadow-md focus-within:ring-2 focus-within:ring-brand-500 transition-all duration-200 will-change-transform hover:translate-y-[2px]" itemScope itemType="https://schema.org/BlogPosting">
  <div class="relative aspect-[16/9] overflow-hidden bg-gradient-to-b from-zinc-100 to-zinc-200 dark:from-zinc-800 dark:to-zinc-700">
    <img 
      src={image} 
      alt={post.data.title} 
      class="w-full h-full object-cover transition-transform duration-300 blur-up group-hover:scale-105"
      loading="lazy"
      decoding="async"
      sizes="(min-width: 1024px) 33vw, 100vw"
      onload="this.setAttribute('data-loaded','')"
    />
  </div>
  
  <div class="p-6">
    <h2 class="text-[1.0625rem] sm:text-[1.125rem] font-semibold mb-2 leading-[1.15]">
      <a href={href} class="text-[1.0625rem] sm:text-[1.125rem] leading-[1.15] hover:text-brand-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 rounded-sm transition-colors break-words" aria-label={`Apri articolo: ${post.data.title}`} itemProp="headline">
        {post.data.title}
      </a>
    </h2>
    
    <p class="opacity-80 text-base mb-4 break-words" itemProp="description">
      {post.data.excerpt ?? post.data.description ?? ''}
    </p>
    
    <div class="flex items-center justify-between text-sm text-zinc-600 dark:text-zinc-400">
      <div class="flex items-center gap-2">
        {dateString && (
          <time datetime={date?.toISOString()} itemProp="datePublished">{dateString}</time>
        )}
        {primaryCategory && (
          <>
            <span aria-hidden="true">Â·</span>
            <a href={`${baseUrl}/?cat=${categorySlug}`} class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full ring-1 ring-zinc-300 dark:ring-zinc-700 hover:bg-zinc-50 dark:hover:bg-zinc-800 transition-colors" aria-label={`Filtra per categoria: ${primaryCategory}`}>
              <span>{primaryCategory}</span>
            </a>
          </>
        )}
      </div>
    </div>
  </div>

  <style>
    img.blur-up:not([data-loaded]) { filter: blur(12px); transform: scale(1.02); opacity: 0.9; }
    img.blur-up[data-loaded] { filter: blur(0); transform: none; opacity: 1; transition: filter .3s ease, transform .3s ease, opacity .3s ease; }
  </style>
</article>

