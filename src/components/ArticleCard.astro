---
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'insights'>
  baseUrl?: string
}

const { post, baseUrl = '/it/insights' } = Astro.props
const rawSlug = post.slug ?? post.id.replace(/\.mdx?$/, '')
// Per i file con prefisso linguistico (en-, sl-), rimuovi il prefisso
// Per i file nelle cartelle (it/, en/, sl/), rimuovi il path
const normalizedSlug = rawSlug.replace(/^(en-|sl-)/,'').replace(/^(it|en|sl)\//, '')
const href = `${baseUrl}/${normalizedSlug}/`

// More robust image selection logic with card-specific format
function getImageSrc(data: any, normalized: string) {
  // Try card-specific format first
  const cardPath = `/posts/${normalized}/card.webp`
  
  // For now, assume card.webp exists (will be generated by script)
  // Could add existence check here if needed
  
  // Then try from frontmatter
  const fmCandidates = [data.image, data.ogImage, data.featuredImage]
  for (const candidate of fmCandidates) {
    if (typeof candidate === 'string' && candidate.trim().length > 0) {
      // Prefer card format if it follows the pattern
      if (candidate.includes('/posts/')) {
        const basePath = candidate.substring(0, candidate.lastIndexOf('/'))
        return `${basePath}/card.webp`
      }
      return candidate.trim()
    }
  }
  
  // Finally fallback
  return '/images/logo_stefano_chermaz.png'
}

const image = getImageSrc(post.data, normalizedSlug)
const date = post.data.date ? new Date(post.data.date) : null
const tags = (post.data.tags ?? []).slice(0, 3) // max 3 tags
const dateString = date ? date.toLocaleDateString('it-IT', { 
  day: 'numeric', 
  month: 'short', 
  year: 'numeric' 
}) : ''
---

<article class="border rounded-2xl overflow-hidden bg-white dark:bg-gray-900 hover:shadow-lg transition-shadow">
  <div class="aspect-[4/3] overflow-hidden">
    <img 
      src={image} 
      alt={post.data.title} 
      class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
      loading="lazy"
    />
  </div>
  
  <div class="p-6">
    <h3 class="text-xl font-semibold mb-2 line-clamp-2">
      <a href={href} class="hover:text-brand-500 transition-colors">
        {post.data.title}
      </a>
    </h3>
    
    <p class="opacity-80 text-base mb-4 line-clamp-3">
      {post.data.excerpt ?? post.data.description ?? ''}
    </p>
    
    <div class="flex items-center justify-between text-sm">
      {dateString && (
        <time datetime={date?.toISOString()} class="text-gray-600 dark:text-gray-400">
          {dateString}
        </time>
      )}
      
      {tags.length > 0 && (
        <div class="flex gap-1 flex-wrap">
          {tags.map(tag => (
            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded text-xs">
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>
  </div>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
