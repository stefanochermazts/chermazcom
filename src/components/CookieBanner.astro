---
import { getLocaleFromUrl, t } from '../utils/i18n'

const locale = getLocaleFromUrl(Astro.url)
const privacyUrl = `/${locale}/privacy/`
const cookiePolicyUrl = `/${locale}/cookie-policy/`
---

<!-- Cookie Banner (inizialmente nascosto, mostrato da JS se necessario) -->
<div id="cookie-banner" class="cookie-banner hidden" role="dialog" aria-labelledby="cookie-banner-title" aria-describedby="cookie-banner-description">
  <div class="cookie-banner-content">
    <div class="cookie-banner-text">
      <h2 id="cookie-banner-title" class="cookie-banner-title">
        {t('cookies.banner.title', locale)}
      </h2>
      <p id="cookie-banner-description" class="cookie-banner-description">
        {t('cookies.banner.description', locale)}
        <a href={cookiePolicyUrl} class="cookie-banner-link">
          {t('cookies.banner.learnMore', locale)}
        </a>
      </p>
    </div>
    
    <div class="cookie-banner-actions">
      <button type="button" id="accept-all-cookies" class="cookie-btn cookie-btn-primary">
        {t('cookies.banner.acceptAll', locale)}
      </button>
      <button type="button" id="accept-necessary-cookies" class="cookie-btn cookie-btn-secondary">
        {t('cookies.banner.acceptNecessary', locale)}
      </button>
      <button type="button" id="customize-cookies" class="cookie-btn cookie-btn-tertiary">
        {t('cookies.banner.customize', locale)}
      </button>
    </div>
  </div>
</div>

<!-- Cookie Preferences Modal -->
<div id="cookie-preferences-modal" class="cookie-modal hidden" role="dialog" aria-labelledby="cookie-preferences-title" aria-modal="true">
  <div class="cookie-modal-backdrop" id="cookie-modal-backdrop"></div>
  <div class="cookie-modal-content">
    <div class="cookie-modal-header">
      <h2 id="cookie-preferences-title" class="cookie-modal-title">
        {t('cookies.preferences.title', locale)}
      </h2>
      <button type="button" id="close-cookie-modal" class="cookie-modal-close" aria-label="Chiudi">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    
    <div class="cookie-modal-body">
      <p class="cookie-modal-description">
        {t('cookies.preferences.description', locale)}
      </p>
      
      <div class="cookie-categories">
        <!-- Cookie Necessari -->
        <div class="cookie-category">
          <div class="cookie-category-header">
            <h3 class="cookie-category-title">
              {t('cookies.preferences.categories.necessary.title', locale)}
            </h3>
            <div class="cookie-toggle-container">
              <span class="cookie-always-enabled">
                {t('cookies.preferences.categories.necessary.alwaysEnabled', locale)}
              </span>
              <div class="cookie-toggle cookie-toggle-disabled" aria-hidden="true">
                <div class="cookie-toggle-switch cookie-toggle-on"></div>
              </div>
            </div>
          </div>
          <p class="cookie-category-description">
            {t('cookies.preferences.categories.necessary.description', locale)}
          </p>
        </div>

        <!-- Cookie Analytics -->
        <div class="cookie-category">
          <div class="cookie-category-header">
            <h3 class="cookie-category-title">
              {t('cookies.preferences.categories.analytics.title', locale)}
            </h3>
            <div class="cookie-toggle-container">
              <label class="cookie-toggle" for="toggle-analytics">
                <input type="checkbox" id="toggle-analytics" class="cookie-toggle-input" data-category="analytics">
                <div class="cookie-toggle-switch"></div>
              </label>
            </div>
          </div>
          <p class="cookie-category-description">
            {t('cookies.preferences.categories.analytics.description', locale)}
          </p>
        </div>

        <!-- Cookie Marketing -->
        <div class="cookie-category">
          <div class="cookie-category-header">
            <h3 class="cookie-category-title">
              {t('cookies.preferences.categories.marketing.title', locale)}
            </h3>
            <div class="cookie-toggle-container">
              <label class="cookie-toggle" for="toggle-marketing">
                <input type="checkbox" id="toggle-marketing" class="cookie-toggle-input" data-category="marketing">
                <div class="cookie-toggle-switch"></div>
              </label>
            </div>
          </div>
          <p class="cookie-category-description">
            {t('cookies.preferences.categories.marketing.description', locale)}
          </p>
        </div>

        <!-- Cookie Preferenze -->
        <div class="cookie-category">
          <div class="cookie-category-header">
            <h3 class="cookie-category-title">
              {t('cookies.preferences.categories.preferences.title', locale)}
            </h3>
            <div class="cookie-toggle-container">
              <label class="cookie-toggle" for="toggle-preferences">
                <input type="checkbox" id="toggle-preferences" class="cookie-toggle-input" data-category="preferences">
                <div class="cookie-toggle-switch"></div>
              </label>
            </div>
          </div>
          <p class="cookie-category-description">
            {t('cookies.preferences.categories.preferences.description', locale)}
          </p>
        </div>
      </div>
    </div>
    
    <div class="cookie-modal-footer">
      <button type="button" id="save-cookie-preferences" class="cookie-btn cookie-btn-primary">
        {t('cookies.preferences.save', locale)}
      </button>
      <button type="button" id="accept-all-modal" class="cookie-btn cookie-btn-secondary">
        {t('cookies.preferences.acceptAll', locale)}
      </button>
      <button type="button" id="reject-all-modal" class="cookie-btn cookie-btn-tertiary">
        {t('cookies.preferences.rejectAll', locale)}
      </button>
    </div>
  </div>
</div>

<style>
  /* Cookie Banner */
  .cookie-banner {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    border-top: 1px solid rgb(229 231 235);
    backdrop-filter: blur(8px);
    z-index: 9999;
    box-shadow: 0 -4px 6px -1px rgb(0 0 0 / 0.1);
    transition: transform 0.3s ease-in-out;
  }

  .darkmode .cookie-banner {
    background: rgba(24, 24, 27, 0.95);
    border-top-color: rgb(63 63 70);
  }

  .cookie-banner.hidden {
    transform: translateY(100%);
  }

  .cookie-banner-content {
    max-width: 1366px;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .cookie-banner-content {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
      padding: 1.5rem 2rem;
    }
  }

  .cookie-banner-text {
    flex: 1;
  }

  .cookie-banner-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: rgb(17 24 39);
  }

  .darkmode .cookie-banner-title {
    color: rgb(249 250 251);
  }

  .cookie-banner-description {
    margin: 0;
    color: rgb(75 85 99);
    line-height: 1.5;
  }

  .darkmode .cookie-banner-description {
    color: rgb(156 163 175);
  }

  .cookie-banner-link {
    color: #1f63ff;
    text-decoration: underline;
  }

  .cookie-banner-link:hover {
    color: #164cd6;
  }

  .cookie-banner-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
  }

  /* Cookie Modal */
  .cookie-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }

  .cookie-modal.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .cookie-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .cookie-modal-content {
    position: relative;
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 10px 10px -5px rgb(0 0 0 / 0.04);
    max-width: 800px;
    width: 100%;
    max-height: 90vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .darkmode .cookie-modal-content {
    background: rgb(24 24 27);
    border: 1px solid rgb(63 63 70);
  }

  .cookie-modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid rgb(229 231 235);
  }

  .darkmode .cookie-modal-header {
    border-bottom-color: rgb(63 63 70);
  }

  .cookie-modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: rgb(17 24 39);
  }

  .darkmode .cookie-modal-title {
    color: rgb(249 250 251);
  }

  .cookie-modal-close {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    color: rgb(107 114 128);
    border-radius: 6px;
    transition: all 0.2s;
  }

  .cookie-modal-close:hover {
    background: rgb(243 244 246);
    color: rgb(17 24 39);
  }

  .darkmode .cookie-modal-close:hover {
    background: rgb(55 65 81);
    color: rgb(249 250 251);
  }

  .cookie-modal-body {
    flex: 1;
    padding: 1.5rem;
    overflow-y: auto;
  }

  .cookie-modal-description {
    margin: 0 0 1.5rem 0;
    color: rgb(75 85 99);
    line-height: 1.6;
  }

  .darkmode .cookie-modal-description {
    color: rgb(156 163 175);
  }

  .cookie-categories {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .cookie-category {
    border: 1px solid rgb(229 231 235);
    border-radius: 8px;
    padding: 1rem;
  }

  .darkmode .cookie-category {
    border-color: rgb(63 63 70);
  }

  .cookie-category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .cookie-category-title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    color: rgb(17 24 39);
  }

  .darkmode .cookie-category-title {
    color: rgb(249 250 251);
  }

  .cookie-category-description {
    margin: 0;
    color: rgb(75 85 99);
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .darkmode .cookie-category-description {
    color: rgb(156 163 175);
  }

  .cookie-toggle-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .cookie-always-enabled {
    font-size: 0.75rem;
    color: rgb(107 114 128);
    font-weight: 500;
  }

  .darkmode .cookie-always-enabled {
    color: rgb(156 163 175);
  }

  /* Toggle Switch */
  .cookie-toggle {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
    cursor: pointer;
  }

  .cookie-toggle-disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  .cookie-toggle-input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .cookie-toggle-switch {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgb(209 213 219);
    border-radius: 24px;
    transition: 0.3s;
  }

  .cookie-toggle-switch:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 2px;
    top: 2px;
    background-color: white;
    border-radius: 50%;
    transition: 0.3s;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .cookie-toggle-input:checked + .cookie-toggle-switch {
    background-color: #1f63ff;
  }

  .cookie-toggle-input:checked + .cookie-toggle-switch:before {
    transform: translateX(20px);
  }

  .cookie-toggle-on {
    background-color: #1f63ff !important;
  }

  .cookie-toggle-on:before {
    transform: translateX(20px) !important;
  }

  .cookie-modal-footer {
    display: flex;
    gap: 0.5rem;
    padding: 1.5rem;
    border-top: 1px solid rgb(229 231 235);
    flex-wrap: wrap;
  }

  .darkmode .cookie-modal-footer {
    border-top-color: rgb(63 63 70);
  }

  /* Buttons */
  .cookie-btn {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s;
    cursor: pointer;
    border: none;
    white-space: nowrap;
  }

  .cookie-btn-primary {
    background: #1f63ff;
    color: white;
  }

  .cookie-btn-primary:hover {
    background: #164cd6;
  }

  .cookie-btn-secondary {
    background: rgb(243 244 246);
    color: rgb(17 24 39);
    border: 1px solid rgb(209 213 219);
  }

  .cookie-btn-secondary:hover {
    background: rgb(229 231 235);
  }

  .darkmode .cookie-btn-secondary {
    background: rgb(55 65 81);
    color: rgb(249 250 251);
    border-color: rgb(75 85 99);
  }

  .darkmode .cookie-btn-secondary:hover {
    background: rgb(75 85 99);
  }

  .cookie-btn-tertiary {
    background: transparent;
    color: rgb(107 114 128);
    border: 1px solid rgb(209 213 219);
  }

  .cookie-btn-tertiary:hover {
    background: rgb(243 244 246);
    color: rgb(17 24 39);
  }

  .darkmode .cookie-btn-tertiary {
    color: rgb(156 163 175);
    border-color: rgb(75 85 99);
  }

  .darkmode .cookie-btn-tertiary:hover {
    background: rgb(55 65 81);
    color: rgb(249 250 251);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .cookie-modal-content {
      margin: 0.5rem;
      max-height: 95vh;
    }
    
    .cookie-modal-footer {
      flex-direction: column;
    }
    
    .cookie-btn {
      width: 100%;
      text-align: center;
    }
    
    .cookie-category-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>

<script>
  // Importa le funzioni del sistema di consenso
  import { 
    needsConsent, 
    loadConsent, 
    saveConsent, 
    acceptAllCookies, 
    acceptNecessaryOnly,
    initializeConsent,
    type CookiePreferences 
  } from '../utils/cookieConsent'

  // Inizializza il sistema al caricamento della pagina
  document.addEventListener('DOMContentLoaded', () => {
    initializeConsent()
    
    // Mostra il banner se necessario
    if (needsConsent()) {
      showCookieBanner()
    }
    
    setupEventListeners()
  })

  function showCookieBanner() {
    const banner = document.getElementById('cookie-banner')
    if (banner) {
      banner.classList.remove('hidden')
    }
  }

  function hideCookieBanner() {
    const banner = document.getElementById('cookie-banner')
    if (banner) {
      banner.classList.add('hidden')
    }
  }

  function showCookieModal() {
    const modal = document.getElementById('cookie-preferences-modal')
    if (modal) {
      modal.classList.remove('hidden')
      document.body.style.overflow = 'hidden'
      
      // Carica le preferenze esistenti
      loadModalPreferences()
      
      // Focus sul primo elemento
      const firstInput = modal.querySelector('input[type="checkbox"]')
      if (firstInput) {
        (firstInput as HTMLElement).focus()
      }
    }
  }

  function hideCookieModal() {
    const modal = document.getElementById('cookie-preferences-modal')
    if (modal) {
      modal.classList.add('hidden')
      document.body.style.overflow = ''
    }
  }

  function loadModalPreferences() {
    const consent = loadConsent()
    if (consent) {
      // Imposta gli stati dei toggle basati sulle preferenze salvate
      setToggleState('toggle-analytics', consent.analytics)
      setToggleState('toggle-marketing', consent.marketing)
      setToggleState('toggle-preferences', consent.preferences)
    } else {
      // Default: solo necessari abilitati
      setToggleState('toggle-analytics', false)
      setToggleState('toggle-marketing', false)
      setToggleState('toggle-preferences', true)
    }
  }

  function setToggleState(toggleId: string, enabled: boolean) {
    const toggle = document.getElementById(toggleId) as HTMLInputElement
    if (toggle) {
      toggle.checked = enabled
    }
  }

  function getModalPreferences(): Omit<CookiePreferences, 'timestamp' | 'version'> {
    return {
      necessary: true, // Sempre true
      analytics: (document.getElementById('toggle-analytics') as HTMLInputElement)?.checked || false,
      marketing: (document.getElementById('toggle-marketing') as HTMLInputElement)?.checked || false,
      preferences: (document.getElementById('toggle-preferences') as HTMLInputElement)?.checked || false
    }
  }

  function setupEventListeners() {
    // Banner buttons
    document.getElementById('accept-all-cookies')?.addEventListener('click', () => {
      acceptAllCookies()
      hideCookieBanner()
    })

    document.getElementById('accept-necessary-cookies')?.addEventListener('click', () => {
      acceptNecessaryOnly()
      hideCookieBanner()
    })

    document.getElementById('customize-cookies')?.addEventListener('click', () => {
      hideCookieBanner()
      showCookieModal()
    })

    // Modal buttons
    document.getElementById('save-cookie-preferences')?.addEventListener('click', () => {
      const preferences = getModalPreferences()
      saveConsent(preferences)
      hideCookieModal()
    })

    document.getElementById('accept-all-modal')?.addEventListener('click', () => {
      acceptAllCookies()
      hideCookieModal()
    })

    document.getElementById('reject-all-modal')?.addEventListener('click', () => {
      acceptNecessaryOnly()
      hideCookieModal()
    })

    document.getElementById('close-cookie-modal')?.addEventListener('click', () => {
      hideCookieModal()
    })

    document.getElementById('cookie-modal-backdrop')?.addEventListener('click', () => {
      hideCookieModal()
    })

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const modal = document.getElementById('cookie-preferences-modal')
        if (modal && !modal.classList.contains('hidden')) {
          hideCookieModal()
        }
      }
    })
  }

  // Esponi funzioni globali per gestione preferenze (per link nel footer, etc.)
  (window as any).showCookiePreferences = () => {
    showCookieModal()
  }

  (window as any).revokeCookieConsent = () => {
    if (confirm('Sei sicuro di voler revocare il consenso per tutti i cookie non necessari?')) {
      acceptNecessaryOnly()
      showCookieBanner()
    }
  }
</script>
