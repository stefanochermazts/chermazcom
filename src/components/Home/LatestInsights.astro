---
/**
 * LatestInsights Component - Ultimi articoli dal blog
 */
import type { CollectionEntry } from 'astro:content'

interface Props {
  items?: CollectionEntry<'insights'>[]
  baseUrl?: string
  title?: string
  subtitle?: string
  allArticlesLabel?: string
  locale?: string
}

const {
  items = [],
  baseUrl = '/it/insights',
  title = 'Ultimi Insights',
  subtitle = 'Articoli tecnici, guide e best practices dal mio blog',
  allArticlesLabel = 'Tutti gli articoli',
  locale = 'it-IT'
} = Astro.props

// Fallback data se non vengono passati insights
const fallbackInsights = [
  {
    title: 'Microsoft Copilot: 7 modi per ottimizzare il lavoro in Word',
    excerpt: 'Scopri le strategie avanzate per massimizzare la produttivitÃ  con Copilot integrato in Word.',
    categories: ['Microsoft 365', 'AI'],
    date: '2024-01-15',
    slug: 'copilot-microsoft-quanto-costa-e-come-attivarlo-senza-sforzo'
  },
  {
    title: 'SharePoint: superare il limite di 3000 elementi',
    excerpt: 'Tecniche avanzate per gestire liste SharePoint con migliaia di elementi mantenendo le performance.',
    categories: ['SharePoint', 'Performance'],
    date: '2024-01-10',
    slug: 'superare-il-limite-dei-3000-elementi-nelle-liste-sharepoint-facilmente'
  },
  {
    title: 'Chatbot basati sull\'IA: le nuove frontiere della comunicazione',
    excerpt: 'Come l\'intelligenza artificiale sta rivoluzionando l\'interazione cliente-azienda.',
    categories: ['AI', 'Chatbot'],
    date: '2024-01-05',
    slug: 'chatbot-basati-sullia-le-nuove-frontiere-della-comunicazione-digitale'
  }
]

const displayItems = items.length > 0 ? items : fallbackInsights
---

<section class="py-16 sm:py-20 bg-zinc-50 dark:bg-zinc-900/50">
  <div class="mx-auto max-w-[1366px] px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="flex items-center justify-between mb-12">
      <div>
        <h2 class="text-3xl font-bold tracking-tight text-zinc-900 dark:text-zinc-50 sm:text-4xl mb-4">{title}</h2>
        <p class="text-xl text-zinc-600 dark:text-zinc-400">{subtitle}</p>
      </div>
      <a 
        href={`${baseUrl}/`} 
        class="hidden sm:inline-flex items-center text-brand-600 hover:text-brand-500 font-semibold group"
      >
        {allArticlesLabel}
        <svg class="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    </div>

    <!-- Articles Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {displayItems.map((insight, index) => {
        const title = insight.data?.title || insight.title
        const excerpt = insight.data?.excerpt || insight.excerpt
        const categories = insight.data?.categories || insight.categories || []
        const date = insight.data?.date || insight.date
        // Usa la stessa logica dei componenti card esistenti
        const rawSlug = insight.slug ?? insight.id.replace(/\.mdx?$/, '')
        // Rimuovi prefisso linguistico per gli slug
        const slug = rawSlug.replace(/^(en-|sl-)/, '')
        
        // Image selection logic for insights
        function getImageSrc(data: any, normalized: string) {
          // Try card-specific format first
          const cardPath = `/posts/${normalized}/card.webp`
          
          // Then try from frontmatter
          const fmCandidates = [data?.image, data?.ogImage, data?.featuredImage]
          for (const candidate of fmCandidates) {
            if (typeof candidate === 'string' && candidate.trim().length > 0) {
              // Prefer card format if it follows the pattern
              if (candidate.includes('/posts/')) {
                const basePath = candidate.substring(0, candidate.lastIndexOf('/'))
                return `${basePath}/card.webp`
              }
              return candidate.trim()
            }
          }
          
          // Finally fallback
          return '/images/logo_stefano_chermaz.png'
        }
        
        const image = getImageSrc(insight.data, slug)
        
        return (
          <article class="group relative overflow-hidden rounded-2xl bg-white dark:bg-zinc-900 shadow-sm ring-1 ring-black/5 dark:ring-white/10 hover:shadow-lg transition-all duration-300">
            <!-- Image -->
            <div class="aspect-[16/9] overflow-hidden">
              <img 
                src={image} 
                alt={title} 
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                loading="lazy"
              />
            </div>

            <!-- Content -->
            <div class="p-6">
              <!-- Categories -->
              {categories.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-3">
                  {categories.slice(0, 2).map((category: string) => (
                    <span class="inline-flex items-center rounded-md bg-brand-100 dark:bg-brand-900/30 px-2 py-1 text-xs font-medium text-brand-700 dark:text-brand-300">
                      {category}
                    </span>
                  ))}
                </div>
              )}

              <!-- Title -->
              <h3 class="text-lg font-semibold text-zinc-900 dark:text-zinc-50 mb-3 group-hover:text-brand-600 dark:group-hover:text-brand-400 transition-colors">
                <a href={`${baseUrl}/${slug}/`} class="stretched-link">
                  {title}
                </a>
              </h3>

              <!-- Excerpt -->
              <p class="text-zinc-600 dark:text-zinc-400 text-sm leading-relaxed mb-4">
                {excerpt}
              </p>

              <!-- Date -->
              {date && (
                <time class="text-xs text-zinc-500 dark:text-zinc-500" datetime={typeof date === 'string' ? date : date.toISOString()}>
                  {typeof date === 'string' 
                    ? new Date(date).toLocaleDateString(locale, { day: 'numeric', month: 'long', year: 'numeric' })
                    : date.toLocaleDateString(locale, { day: 'numeric', month: 'long', year: 'numeric' })
                  }
                </time>
              )}
            </div>

            <!-- Hover effect border -->
            <div class="absolute inset-0 rounded-2xl border-2 border-transparent group-hover:border-brand-200 dark:group-hover:border-brand-800 transition-colors pointer-events-none" />
          </article>
        )
      })}
    </div>

    <!-- Mobile CTA -->
    <div class="mt-12 text-center sm:hidden">
      <a 
        href={`${baseUrl}/`} 
        class="inline-flex items-center rounded-lg bg-brand-600 px-6 py-3 text-sm font-semibold text-white shadow-sm hover:bg-brand-500 focus:outline-2 focus:outline-offset-2 focus:outline-brand-500 transition-colors"
      >
        {allArticlesLabel}
        <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  .stretched-link::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: "";
  }
</style>

